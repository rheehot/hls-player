{"version":3,"sources":["component/video-player/styles.tsx","component/video-player/index.tsx","component/layout/styles.tsx","component/header/styles.tsx","component/constant.ts","component/header/index.tsx","component/layout/index.tsx","App.tsx","serviceWorker.ts","component/global-style/index.tsx","index.tsx"],"names":["VideoPlayer","styled","div","Player","video","src","playerRef","useRef","useState","player","setPlayer","useEffect","newPlayer","videojs","current","controls","autoplay","muted","preload","html5","hls","enableLowInitialPlaylist","smoothQualityChange","overrideNative","dispose","data-vjs-player","ref","className","playsInline","Layout","Content","ContentContainer","Header","HeaderContainer","children","App","path","setPath","input","setInput","style","margin","fontSize","onChange","e","target","value","onClick","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wYAEO,IAAMA,EAAcC,IAAOC,IAAV,KAEXC,EAASF,IAAOG,MAAV,KC2CJJ,EAtCiC,SAAC,GAAa,IAAXK,EAAU,EAAVA,IAC3CC,EAAYC,iBAAO,MADkC,EAE/BC,mBAAS,MAFsB,mBAEpDC,EAFoD,KAE5CC,EAF4C,KA+B3D,OA3BAC,qBAAU,WACR,IAAMC,EAAYC,IAAQP,EAAUQ,QAAS,CAC3CC,UAAU,EACVC,UAAU,EACVC,OAAO,EACPC,QAAS,OACTC,MAAO,CACLC,IAAK,CACHC,0BAA0B,EAC1BC,qBAAqB,EACrBC,gBAAgB,MAMtB,OAFAb,EAAUE,GAEH,WACLA,EAAUY,aAEX,IAEHb,qBAAU,WACO,OAAXF,GACFA,EAAOJ,IAAI,CAAEA,UAEd,CAACI,EAAQJ,IAGV,kBAAC,EAAD,CAAeoB,mBAAA,GACb,kBAAC,EAAD,CAAUC,IAAKpB,EAAWqB,UAAU,WAAWC,aAAW,MCxCnDC,EAAS5B,IAAOC,IAAV,qEAAGD,CAAH,iCAKN6B,EAAU7B,IAAOC,IAAV,sEAAGD,CAAH,MAEP8B,EAAmB9B,IAAOC,IAAV,+EAAGD,CAAH,MCFhB+B,EAAS/B,IAAOC,IAAV,iEAAGD,CAAH,6BAKNgC,EAAkBhC,IAAOC,IAAV,0EAAGD,CAAH,+CCPlB,WCSK+B,GFGK/B,IAAOC,IAAV,+DAAGD,CAAH,MEXqB,WACpC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SCWS4B,EAXuB,SAAC,GAAkB,IAAhBK,EAAe,EAAfA,SACvC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAYA,MC6BLC,MAtCf,WAAgB,IAAD,EACW3B,mBAAS,IADpB,mBACN4B,EADM,KACAC,EADA,OAEa7B,mBAAS,IAFtB,mBAEN8B,EAFM,KAECC,EAFD,KAWb,OACE,kBAAC,EAAD,KACE,6BACE,yBACEC,MAAO,CACLC,OAAQ,OACRC,SAAU,WAHd,4DAOE,0BACEF,MAAO,CACLC,OAAQ,SAGV,2BAAOE,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOC,WAE5C,8BACE,4BAAQC,QAzBG,WACdT,GAGLD,EAAQC,KAqBA,kBAGHF,EAAO,kBAAC,EAAD,CAAa/B,IAAK+B,IAAW,QCzBzBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+YChBN,IAqBeC,EArBKC,YAAH,KCIjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9cee94d1.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const VideoPlayer = styled.div``;\r\n\r\nexport const Player = styled.video``;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport videojs from \"video.js\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\ninterface VideoPlayerProps {\r\n  src: string;\r\n}\r\n\r\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({ src }) => {\r\n  const playerRef = useRef(null);\r\n  const [player, setPlayer] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const newPlayer = videojs(playerRef.current, {\r\n      controls: true,\r\n      autoplay: true,\r\n      muted: true,\r\n      preload: \"auto\",\r\n      html5: {\r\n        hls: {\r\n          enableLowInitialPlaylist: true,\r\n          smoothQualityChange: true,\r\n          overrideNative: true,\r\n        },\r\n      },\r\n    });\r\n    setPlayer(newPlayer);\r\n\r\n    return () => {\r\n      newPlayer.dispose();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (player !== null) {\r\n      player.src({ src });\r\n    }\r\n  }, [player, src]);\r\n\r\n  return (\r\n    <S.VideoPlayer data-vjs-player>\r\n      <S.Player ref={playerRef} className=\"video-js\" playsInline />\r\n    </S.VideoPlayer>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const Layout = styled.div`\r\n  width: 100%;\r\n  min-height: 100%;\r\n`;\r\n\r\nexport const Content = styled.div``;\r\n\r\nexport const ContentContainer = styled.div``;\r\n","import styled from \"styled-components/macro\";\r\nimport { THEME } from \"../constant\";\r\n\r\ninterface ActiveProps {\r\n  active?: boolean;\r\n}\r\n\r\nexport const Header = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const HeaderContainer = styled.div`\r\n  height: 5.3rem;\r\n  border-bottom: 1px solid ${THEME.BORDER};\r\n`;\r\n\r\nexport const Logo = styled.div``;\r\n","export const THEME = {\r\n  PRIMARY: \"#55C1FF\",\r\n  SECONDARY: \"#5887FF\",\r\n  TETRIARY: \"#102E4A\",\r\n  WORD: \"#102E4A\",\r\n  BORDER: \"#E3E3E3\",\r\n};\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\ninterface HeaderProps {}\r\n\r\nconst Header: React.FC<HeaderProps> = () => {\r\n  return (\r\n    <S.Header>\r\n      <S.HeaderContainer></S.HeaderContainer>\r\n    </S.Header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import * as S from \"./styles\";\r\n\r\nimport React from \"react\";\r\nimport Header from \"../header\";\r\n\r\ninterface LayoutProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <S.Layout>\r\n      <Header />\r\n      <S.ContentContainer>\r\n        <S.Content>{children}</S.Content>\r\n      </S.ContentContainer>\r\n    </S.Layout>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, { useState } from \"react\";\n\nimport VideoPlayer from \"./component/video-player\";\nimport Layout from \"./component/layout\";\n\nfunction App() {\n  const [path, setPath] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (!input) {\n      return;\n    }\n    setPath(input);\n  };\n\n  return (\n    <Layout>\n      <div>\n        <div\n          style={{\n            margin: \"1rem\",\n            fontSize: \"1.4rem\",\n          }}\n        >\n          주소를 입력해주세요 :\n          <span\n            style={{\n              margin: \"1rem\",\n            }}\n          >\n            <input onChange={(e) => setInput(e.target.value)} />\n          </span>\n          <span>\n            <button onClick={handleSubmit}>입력</button>\n          </span>\n        </div>\n        {path ? <VideoPlayer src={path} /> : null}\n      </div>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components/macro\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-display:'block';\r\n    box-sizing : border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    font-family: 'Inter', sans-serif;\r\n  }\r\n  html {\r\n    font-size : 10px;\r\n  }\r\n  \r\n  body {\r\n    margin: 0;\r\n    user-select : none;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyle from \"./component/global-style\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}